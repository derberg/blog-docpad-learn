{ fullPath: '/Users/i303812/projects/blog-docpad-learn/src/documents/posts/2015-02-20.html.md',
  relativePath: 'posts/2015-02-20.html.md',
  id: 'c5',
  basename: '2015-02-20',
  outBasename: '2015-02-20',
  extension: 'md',
  outExtension: 'html',
  extensions: [ 'html', 'md' ],
  filename: '2015-02-20.html.md',
  fullDirPath: '/Users/i303812/projects/blog-docpad-learn/src/documents/posts',
  outPath: '/Users/i303812/projects/blog-docpad-learn/out/posts/2015-02-20.html',
  outDirPath: '/Users/i303812/projects/blog-docpad-learn/out/posts',
  outFilename: '2015-02-20.html',
  relativeOutPath: 'posts/2015-02-20.html',
  relativeDirPath: 'posts',
  relativeOutDirPath: 'posts',
  relativeBase: 'posts/2015-02-20',
  relativeOutBase: 'posts/2015-02-20',
  contentType: 'text/x-markdown',
  outContentType: 'text/html',
  ctime: Fri Feb 20 2015 09:20:05 GMT+0100 (CET),
  mtime: Fri Feb 20 2015 09:20:05 GMT+0100 (CET),
  rtime: Fri Feb 20 2015 09:20:12 GMT+0100 (CET),
  wtime: null,
  exists: true,
  encoding: 'utf8',
  source: '---\ntitle: DocPad Architecture - Basics\ntags: [\'metadata\', \'architecture\', \'extension\']\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture\n---\n\nI\'ve just learned that I should not write in the post, what will be present in the next one. Before I show you how I\'ve created this blog post from the front end side (responsivenes, style, github pages deployment) I have to explain to you some basics, like the structure of the project and overal architecture/mechanisms of DocPad.\n\n## Structure\n\n### root\n\nThis is what you have on the `root`:\n\n- `blog-docpad-learn`\n - `node_modules`: This directory gets created once you run `npm install` in the project. As I already mentioned, DocPad is a Node.js app, therefore it needs all the node dependencies in the project.\n - `out`: Once you start the project for the first time, the whole rendered content goes to this single directory. Once you generate your content properly, content of this folder is what you want to host on your server.\n - `src`: Will get back to this one.\n - `docpad.coffee`: DocPad\'s brain. This is a configuration file for your project. It\'s content is created with CoffeeScript, but if you really, I mean really have something against and want to use JavaScript, then just name the file `docpad.js`.\n - `package.json`: Each Node.js project has its config file with all the information about the project and its dependencies. All the docpad plugins that us are using, are registered in this file. This is why it is so simple to install the project with simple `npm install`. It just picks up your dependencies and downloads them to your project.\n - `README.md`: Your repo needs documentation. Get use to it; each git repository has a readme file that should contain its description and quick steps to run it.\n\n### src\n\nThis is what you have in the `src` directory:\n\n- `src`\n - `documents`: Whatever you put here, DocPad takes it in during build and process them accordingly.\n - `files`: This is a place for all the static files, that are required for your project, but do not require any action from DocPad.\n - `layouts`: Here you define all the layouts for your project. In case of this blog, these are a HTML layouts with predefined markup structure for the whole project and for a specific post.\n\nIt is possible to change this naming to have more intuitive names: dynamic for documents and static for files\n\n### out vs documents and files\n\nAs you already know, `out` directory is a place for your generated static content. How files go there?\n\n1. DocPad looks on the `documents` directory first and triggers generation process.\n  * From the documents metadata information it knows which layout (located in `layouts` directory) should be used to render a content\n  * From the document extension it knows how to process the content, should it be a conversion from markdown to html or something else?\n  * And yeah, there are much more things happening at this point, but they are not relevant now\n2. Whatever gets out from `documents` is combined together with `files` directory in the `out` directory. It means that if you had some files in `files/scripts` and `documents/scripts` directories, content of both is added to `out/scripts`\n\n## Generation\n\nI don\'t want to explain everything here as that would be to much for start. Let me just focus now on basic introduction to documents metadata and extension importance.\n\n### Document\'s Metadata\n\nFor DocPad, every file stored in `documents` folder is an object that you can parse to JSON format. It not only contains the content of the file but also a bunch of very useful information, matadata that can help you when you need to query for a specific file and render it wherever you want.\n\nThere are 2 types of metadata:\n* The one added with DocPad by default\n* The one added by you to a specific file\n\nLet me show you a sample basing on this post:\n* DocPad metadata: download\n* My post metadata:\n```\ntitle: DocPad Architecture - Basics\ntags: [\'metadata\', \'architecture\', \'extension\']\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture\n```\n\nYou can quickly spot that these metadata are not only useful while querying but also if you need to display something on the page. Notice where are they used on my blog.\n\n\n### Document\'s Extension\n',
  content: 'I\'ve just learned that I should not write in the post, what will be present in the next one. Before I show you how I\'ve created this blog post from the front end side (responsivenes, style, github pages deployment) I have to explain to you some basics, like the structure of the project and overal architecture/mechanisms of DocPad.\n\n## Structure\n\n### root\n\nThis is what you have on the `root`:\n\n- `blog-docpad-learn`\n - `node_modules`: This directory gets created once you run `npm install` in the project. As I already mentioned, DocPad is a Node.js app, therefore it needs all the node dependencies in the project.\n - `out`: Once you start the project for the first time, the whole rendered content goes to this single directory. Once you generate your content properly, content of this folder is what you want to host on your server.\n - `src`: Will get back to this one.\n - `docpad.coffee`: DocPad\'s brain. This is a configuration file for your project. It\'s content is created with CoffeeScript, but if you really, I mean really have something against and want to use JavaScript, then just name the file `docpad.js`.\n - `package.json`: Each Node.js project has its config file with all the information about the project and its dependencies. All the docpad plugins that us are using, are registered in this file. This is why it is so simple to install the project with simple `npm install`. It just picks up your dependencies and downloads them to your project.\n - `README.md`: Your repo needs documentation. Get use to it; each git repository has a readme file that should contain its description and quick steps to run it.\n\n### src\n\nThis is what you have in the `src` directory:\n\n- `src`\n - `documents`: Whatever you put here, DocPad takes it in during build and process them accordingly.\n - `files`: This is a place for all the static files, that are required for your project, but do not require any action from DocPad.\n - `layouts`: Here you define all the layouts for your project. In case of this blog, these are a HTML layouts with predefined markup structure for the whole project and for a specific post.\n\nIt is possible to change this naming to have more intuitive names: dynamic for documents and static for files\n\n### out vs documents and files\n\nAs you already know, `out` directory is a place for your generated static content. How files go there?\n\n1. DocPad looks on the `documents` directory first and triggers generation process.\n  * From the documents metadata information it knows which layout (located in `layouts` directory) should be used to render a content\n  * From the document extension it knows how to process the content, should it be a conversion from markdown to html or something else?\n  * And yeah, there are much more things happening at this point, but they are not relevant now\n2. Whatever gets out from `documents` is combined together with `files` directory in the `out` directory. It means that if you had some files in `files/scripts` and `documents/scripts` directories, content of both is added to `out/scripts`\n\n## Generation\n\nI don\'t want to explain everything here as that would be to much for start. Let me just focus now on basic introduction to documents metadata and extension importance.\n\n### Document\'s Metadata\n\nFor DocPad, every file stored in `documents` folder is an object that you can parse to JSON format. It not only contains the content of the file but also a bunch of very useful information, matadata that can help you when you need to query for a specific file and render it wherever you want.\n\nThere are 2 types of metadata:\n* The one added with DocPad by default\n* The one added by you to a specific file\n\nLet me show you a sample basing on this post:\n* DocPad metadata: download\n* My post metadata:\n```\ntitle: DocPad Architecture - Basics\ntags: [\'metadata\', \'architecture\', \'extension\']\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture\n```\n\nYou can quickly spot that these metadata are not only useful while querying but also if you need to display something on the page. Notice where are they used on my blog.\n\n\n### Document\'s Extension',
  tags: [ 'metadata', 'architecture', 'extension' ],
  render: true,
  write: true,
  writeSource: false,
  dynamic: false,
  title: 'DocPad Architecture - Basics',
  name: '2015-02-20.html',
  date: Fri Feb 20 2015 09:20:05 GMT+0100 (CET),
  slug: 'posts-2015-02-20',
  url: '/posts/2015-02-20.html',
  urls: [ '/posts/2015-02-20.html' ],
  ignored: false,
  standalone: false,
  referencesOthers: false,
  header: 'title: DocPad Architecture - Basics\ntags: [\'metadata\', \'architecture\', \'extension\']\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture',
  parser: 'yaml',
  body: 'I\'ve just learned that I should not write in the post, what will be present in the next one. Before I show you how I\'ve created this blog post from the front end side (responsivenes, style, github pages deployment) I have to explain to you some basics, like the structure of the project and overal architecture/mechanisms of DocPad.\n\n## Structure\n\n### root\n\nThis is what you have on the `root`:\n\n- `blog-docpad-learn`\n - `node_modules`: This directory gets created once you run `npm install` in the project. As I already mentioned, DocPad is a Node.js app, therefore it needs all the node dependencies in the project.\n - `out`: Once you start the project for the first time, the whole rendered content goes to this single directory. Once you generate your content properly, content of this folder is what you want to host on your server.\n - `src`: Will get back to this one.\n - `docpad.coffee`: DocPad\'s brain. This is a configuration file for your project. It\'s content is created with CoffeeScript, but if you really, I mean really have something against and want to use JavaScript, then just name the file `docpad.js`.\n - `package.json`: Each Node.js project has its config file with all the information about the project and its dependencies. All the docpad plugins that us are using, are registered in this file. This is why it is so simple to install the project with simple `npm install`. It just picks up your dependencies and downloads them to your project.\n - `README.md`: Your repo needs documentation. Get use to it; each git repository has a readme file that should contain its description and quick steps to run it.\n\n### src\n\nThis is what you have in the `src` directory:\n\n- `src`\n - `documents`: Whatever you put here, DocPad takes it in during build and process them accordingly.\n - `files`: This is a place for all the static files, that are required for your project, but do not require any action from DocPad.\n - `layouts`: Here you define all the layouts for your project. In case of this blog, these are a HTML layouts with predefined markup structure for the whole project and for a specific post.\n\nIt is possible to change this naming to have more intuitive names: dynamic for documents and static for files\n\n### out vs documents and files\n\nAs you already know, `out` directory is a place for your generated static content. How files go there?\n\n1. DocPad looks on the `documents` directory first and triggers generation process.\n  * From the documents metadata information it knows which layout (located in `layouts` directory) should be used to render a content\n  * From the document extension it knows how to process the content, should it be a conversion from markdown to html or something else?\n  * And yeah, there are much more things happening at this point, but they are not relevant now\n2. Whatever gets out from `documents` is combined together with `files` directory in the `out` directory. It means that if you had some files in `files/scripts` and `documents/scripts` directories, content of both is added to `out/scripts`\n\n## Generation\n\nI don\'t want to explain everything here as that would be to much for start. Let me just focus now on basic introduction to documents metadata and extension importance.\n\n### Document\'s Metadata\n\nFor DocPad, every file stored in `documents` folder is an object that you can parse to JSON format. It not only contains the content of the file but also a bunch of very useful information, matadata that can help you when you need to query for a specific file and render it wherever you want.\n\nThere are 2 types of metadata:\n* The one added with DocPad by default\n* The one added by you to a specific file\n\nLet me show you a sample basing on this post:\n* DocPad metadata: download\n* My post metadata:\n```\ntitle: DocPad Architecture - Basics\ntags: [\'metadata\', \'architecture\', \'extension\']\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture\n```\n\nYou can quickly spot that these metadata are not only useful while querying but also if you need to display something on the page. Notice where are they used on my blog.\n\n\n### Document\'s Extension',
  rendered: true,
  contentRendered: '<!DOCTYPE html>\n<html lang="en">\n\n<head>\n\n    <meta charset="utf-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n    <meta name="description" content="This is a blog post about all the technical and not technical concepts related to awesome DocPad generator.">\n    <meta name="author" content="Lukasz Gornicki">\n\n    <title>exTW Blog</title>\n\n    <!-- Using DocPad built in helper to collect all the styles listed in configuration file and render a HTML markup for them -->\n    <link  rel="stylesheet" href="/css/bootstrap.min.css" /><link  rel="stylesheet" href="/css/clean-blog.min.css" />\n\n    <!-- Custom Fonts -->\n    <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">\n    <link href=\'http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic\' rel=\'stylesheet\' type=\'text/css\'>\n    <link href=\'http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800\' rel=\'stylesheet\' type=\'text/css\'>\n\n</head>\n\n<body>\n\n    <!-- Navigation -->\n    <nav class="navbar navbar-default navbar-custom navbar-fixed-top">\n        <div class="container-fluid">\n            <!-- Brand and toggle get grouped for better mobile display -->\n            <div class="navbar-header page-scroll">\n                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">\n                    <span class="sr-only">Toggle navigation</span>\n                    <span class="icon-bar"></span>\n                    <span class="icon-bar"></span>\n                    <span class="icon-bar"></span>\n                </button>\n            </div>\n\n            <!-- Collect the nav links, forms, and other content for toggling -->\n            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">\n                <ul class="nav navbar-nav navbar-right">\n                    <li>\n                        <a href="/index.html">Home</a>\n                    </li>\n                    <li>\n                        <a href="/about.html">About</a>\n                    </li>\n                    <!--<li>\n                        <a href="/posts/index.html">Posts</a>\n                    </li>-->\n                </ul>\n            </div>\n            <!-- /.navbar-collapse -->\n        </div>\n        <!-- /.container -->\n    </nav>\n\n    <!-- Content of any document that uses this layout is placed here, document by document during DocPad generation process  -->\n    <!-- Page Header -->\n<!-- Set your background image for this header on the line below. -->\n<header class="intro-header" style="background-image: url(\'/img/post-bg.jpg\')">\n    <div class="container">\n        <div class="row">\n            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">\n                <div class="post-heading">\n                    <h1>DocPad Architecture - Basics</h1>\n                    <h2 class="subheading">Understanding the DocPad project structure and its architecture</h2>\n                    <span class="meta">Posted by <a href="#">Lukasz Gornicki</a> on February 20, 2015</span>\n                </div>\n            </div>\n        </div>\n    </div>\n</header>\n\n<!-- Post Content -->\n<article>\n    <div class="container">\n        <div class="row">\n            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">\n                <!-- Content of any document that uses this layout is placed here, document by document during DocPad generation process  -->\n                <p>I&#39;ve just learned that I should not write in the post, what will be present in the next one. Before I show you how I&#39;ve created this blog post from the front end side (responsivenes, style, github pages deployment) I have to explain to you some basics, like the structure of the project and overal architecture/mechanisms of DocPad.</p>\n<h2 id="structure">Structure</h2>\n<h3 id="root">root</h3>\n<p>This is what you have on the <code>root</code>:</p>\n<ul>\n<li><code>blog-docpad-learn</code><ul>\n<li><code>node_modules</code>: This directory gets created once you run <code>npm install</code> in the project. As I already mentioned, DocPad is a Node.js app, therefore it needs all the node dependencies in the project.</li>\n<li><code>out</code>: Once you start the project for the first time, the whole rendered content goes to this single directory. Once you generate your content properly, content of this folder is what you want to host on your server.</li>\n<li><code>src</code>: Will get back to this one.</li>\n<li><code>docpad.coffee</code>: DocPad&#39;s brain. This is a configuration file for your project. It&#39;s content is created with CoffeeScript, but if you really, I mean really have something against and want to use JavaScript, then just name the file <code>docpad.js</code>.</li>\n<li><code>package.json</code>: Each Node.js project has its config file with all the information about the project and its dependencies. All the docpad plugins that us are using, are registered in this file. This is why it is so simple to install the project with simple <code>npm install</code>. It just picks up your dependencies and downloads them to your project.</li>\n<li><code>README.md</code>: Your repo needs documentation. Get use to it; each git repository has a readme file that should contain its description and quick steps to run it.</li>\n</ul>\n</li>\n</ul>\n<h3 id="src">src</h3>\n<p>This is what you have in the <code>src</code> directory:</p>\n<ul>\n<li><code>src</code><ul>\n<li><code>documents</code>: Whatever you put here, DocPad takes it in during build and process them accordingly.</li>\n<li><code>files</code>: This is a place for all the static files, that are required for your project, but do not require any action from DocPad.</li>\n<li><code>layouts</code>: Here you define all the layouts for your project. In case of this blog, these are a HTML layouts with predefined markup structure for the whole project and for a specific post.</li>\n</ul>\n</li>\n</ul>\n<p>It is possible to change this naming to have more intuitive names: dynamic for documents and static for files</p>\n<h3 id="out-vs-documents-and-files">out vs documents and files</h3>\n<p>As you already know, <code>out</code> directory is a place for your generated static content. How files go there?</p>\n<ol>\n<li>DocPad looks on the <code>documents</code> directory first and triggers generation process.<ul>\n<li>From the documents metadata information it knows which layout (located in <code>layouts</code> directory) should be used to render a content</li>\n<li>From the document extension it knows how to process the content, should it be a conversion from markdown to html or something else?</li>\n<li>And yeah, there are much more things happening at this point, but they are not relevant now</li>\n</ul>\n</li>\n<li>Whatever gets out from <code>documents</code> is combined together with <code>files</code> directory in the <code>out</code> directory. It means that if you had some files in <code>files/scripts</code> and <code>documents/scripts</code> directories, content of both is added to <code>out/scripts</code></li>\n</ol>\n<h2 id="generation">Generation</h2>\n<p>I don&#39;t want to explain everything here as that would be to much for start. Let me just focus now on basic introduction to documents metadata and extension importance.</p>\n<h3 id="document-s-metadata">Document&#39;s Metadata</h3>\n<p>For DocPad, every file stored in <code>documents</code> folder is an object that you can parse to JSON format. It not only contains the content of the file but also a bunch of very useful information, matadata that can help you when you need to query for a specific file and render it wherever you want.</p>\n<p>There are 2 types of metadata:</p>\n<ul>\n<li>The one added with DocPad by default</li>\n<li>The one added by you to a specific file</li>\n</ul>\n<p>Let me show you a sample basing on this post:</p>\n<ul>\n<li>DocPad metadata: download</li>\n<li>My post metadata:<pre><code>title: DocPad Architecture - Basics\ntags: [&#39;metadata&#39;, &#39;architecture&#39;, &#39;extension&#39;]\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture\n</code></pre></li>\n</ul>\n<p>You can quickly spot that these metadata are not only useful while querying but also if you need to display something on the page. Notice where are they used on my blog.</p>\n<h3 id="document-s-extension">Document&#39;s Extension</h3>\n\n            </div>\n        </div>\n    </div>\n</article>\n\n<hr>\n\n\n    <!-- Footer -->\n    <footer>\n        <div class="container">\n            <div class="row">\n                <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">\n                    <ul class="list-inline text-center">\n                        <li>\n                            <a href="https://twitter.com/derberq">\n                                <span class="fa-stack fa-lg">\n                                    <i class="fa fa-circle fa-stack-2x"></i>\n                                    <i class="fa fa-twitter fa-stack-1x fa-inverse"></i>\n                                </span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href="http://stackoverflow.com/users/2088167/lukasz-gornicki">\n                                <span class="fa-stack fa-lg">\n                                    <i class="fa fa-circle fa-stack-2x"></i>\n                                    <i class="fa fa-stack-overflow fa-stack-1x fa-inverse"></i>\n                                </span>\n                            </a>\n                        </li>\n                        <li>\n                            <a href="https://github.com/derberg">\n                                <span class="fa-stack fa-lg">\n                                    <i class="fa fa-circle fa-stack-2x"></i>\n                                    <i class="fa fa-github fa-stack-1x fa-inverse"></i>\n                                </span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    </footer>\n\n    <!-- Using DocPad built in helper to collect all the scripts listed in configuration file and render a HTML markup for them -->\n    <script defer="defer"  src="/js/jquery.min.js"></script><script defer="defer"  src="/js/bootstrap.min.js"></script><script defer="defer"  src="/js/clean-blog.min.js"></script>\n\n</body>\n\n</html>\n',
  contentRenderedWithoutLayouts: '<p>I&#39;ve just learned that I should not write in the post, what will be present in the next one. Before I show you how I&#39;ve created this blog post from the front end side (responsivenes, style, github pages deployment) I have to explain to you some basics, like the structure of the project and overal architecture/mechanisms of DocPad.</p>\n<h2 id="structure">Structure</h2>\n<h3 id="root">root</h3>\n<p>This is what you have on the <code>root</code>:</p>\n<ul>\n<li><code>blog-docpad-learn</code><ul>\n<li><code>node_modules</code>: This directory gets created once you run <code>npm install</code> in the project. As I already mentioned, DocPad is a Node.js app, therefore it needs all the node dependencies in the project.</li>\n<li><code>out</code>: Once you start the project for the first time, the whole rendered content goes to this single directory. Once you generate your content properly, content of this folder is what you want to host on your server.</li>\n<li><code>src</code>: Will get back to this one.</li>\n<li><code>docpad.coffee</code>: DocPad&#39;s brain. This is a configuration file for your project. It&#39;s content is created with CoffeeScript, but if you really, I mean really have something against and want to use JavaScript, then just name the file <code>docpad.js</code>.</li>\n<li><code>package.json</code>: Each Node.js project has its config file with all the information about the project and its dependencies. All the docpad plugins that us are using, are registered in this file. This is why it is so simple to install the project with simple <code>npm install</code>. It just picks up your dependencies and downloads them to your project.</li>\n<li><code>README.md</code>: Your repo needs documentation. Get use to it; each git repository has a readme file that should contain its description and quick steps to run it.</li>\n</ul>\n</li>\n</ul>\n<h3 id="src">src</h3>\n<p>This is what you have in the <code>src</code> directory:</p>\n<ul>\n<li><code>src</code><ul>\n<li><code>documents</code>: Whatever you put here, DocPad takes it in during build and process them accordingly.</li>\n<li><code>files</code>: This is a place for all the static files, that are required for your project, but do not require any action from DocPad.</li>\n<li><code>layouts</code>: Here you define all the layouts for your project. In case of this blog, these are a HTML layouts with predefined markup structure for the whole project and for a specific post.</li>\n</ul>\n</li>\n</ul>\n<p>It is possible to change this naming to have more intuitive names: dynamic for documents and static for files</p>\n<h3 id="out-vs-documents-and-files">out vs documents and files</h3>\n<p>As you already know, <code>out</code> directory is a place for your generated static content. How files go there?</p>\n<ol>\n<li>DocPad looks on the <code>documents</code> directory first and triggers generation process.<ul>\n<li>From the documents metadata information it knows which layout (located in <code>layouts</code> directory) should be used to render a content</li>\n<li>From the document extension it knows how to process the content, should it be a conversion from markdown to html or something else?</li>\n<li>And yeah, there are much more things happening at this point, but they are not relevant now</li>\n</ul>\n</li>\n<li>Whatever gets out from <code>documents</code> is combined together with <code>files</code> directory in the <code>out</code> directory. It means that if you had some files in <code>files/scripts</code> and <code>documents/scripts</code> directories, content of both is added to <code>out/scripts</code></li>\n</ol>\n<h2 id="generation">Generation</h2>\n<p>I don&#39;t want to explain everything here as that would be to much for start. Let me just focus now on basic introduction to documents metadata and extension importance.</p>\n<h3 id="document-s-metadata">Document&#39;s Metadata</h3>\n<p>For DocPad, every file stored in <code>documents</code> folder is an object that you can parse to JSON format. It not only contains the content of the file but also a bunch of very useful information, matadata that can help you when you need to query for a specific file and render it wherever you want.</p>\n<p>There are 2 types of metadata:</p>\n<ul>\n<li>The one added with DocPad by default</li>\n<li>The one added by you to a specific file</li>\n</ul>\n<p>Let me show you a sample basing on this post:</p>\n<ul>\n<li>DocPad metadata: download</li>\n<li>My post metadata:<pre><code>title: DocPad Architecture - Basics\ntags: [&#39;metadata&#39;, &#39;architecture&#39;, &#39;extension&#39;]\nlayout: post\nauthor: Lukasz Gornicki\nday: February 20, 2015\ndescription: Understanding the DocPad project structure and its architecture\n</code></pre></li>\n</ul>\n<p>You can quickly spot that these metadata are not only useful while querying but also if you need to display something on the page. Notice where are they used on my blog.</p>\n<h3 id="document-s-extension">Document&#39;s Extension</h3>\n',
  renderSingleExtensions: false,
  layout: 'post',
  author: 'Lukasz Gornicki',
  day: 'February 20, 2015',
  description: 'Understanding the DocPad project structure and its architecture',
  layoutRelativePath: 'post.html.eco',
  meta:
   { title: 'DocPad Architecture - Basics',
     tags: [ 'metadata', 'architecture', 'extension' ],
     layout: 'post',
     author: 'Lukasz Gornicki',
     day: 'February 20, 2015',
     description: 'Understanding the DocPad project structure and its architecture' } }
